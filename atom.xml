<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Han1254</title>
  
  <subtitle>走在成为极客的路上。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-21T12:37:44.244Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Han1254</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>离散数学—_函数</title>
    <link href="http://yoursite.com/2019/06/21/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E2%80%94-%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/06/21/离散数学—-函数/</id>
    <published>2019-06-21T12:35:21.000Z</published>
    <updated>2019-06-21T12:37:44.244Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/2019/06/21/离散数学—-函数/函数.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/2019/06/21/离散数学—-函数/函数.png&quot; alt&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="离散数学" scheme="http://yoursite.com/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>离散数学-二元关系</title>
    <link href="http://yoursite.com/2019/06/20/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2019/06/20/离散数学-二元关系/</id>
    <published>2019-06-20T13:55:22.000Z</published>
    <updated>2019-06-21T12:33:27.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="离散数学二元关系思维导图"><a href="#离散数学二元关系思维导图" class="headerlink" title="离散数学二元关系思维导图"></a>离散数学二元关系思维导图</h1><a id="more"></a><p><img src="/2019/06/20/离散数学-二元关系/二元关系.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;离散数学二元关系思维导图&quot;&gt;&lt;a href=&quot;#离散数学二元关系思维导图&quot; class=&quot;headerlink&quot; title=&quot;离散数学二元关系思维导图&quot;&gt;&lt;/a&gt;离散数学二元关系思维导图&lt;/h1&gt;
    
    </summary>
    
    
      <category term="离散数学" scheme="http://yoursite.com/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerViewBaseAdapter基础封装</title>
    <link href="http://yoursite.com/2019/06/19/RecyclerViewBaseAdapter%E5%9F%BA%E7%A1%80%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/06/19/RecyclerViewBaseAdapter基础封装/</id>
    <published>2019-06-19T10:03:25.000Z</published>
    <updated>2019-06-19T11:56:43.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RecycelrViewAdapter的封装"><a href="#RecycelrViewAdapter的封装" class="headerlink" title="RecycelrViewAdapter的封装"></a>RecycelrViewAdapter的封装</h1><p>It’s well known that RecyclerView is a powerful tool to create a list view or a grid view, however, it’s also complicated to use.<br><a id="more"></a><br>There’s a passage I writed a few months ago, in this passage I used an example to show the basic usage of RecyclerView.<br>—&gt;<a href="https://github.com/han1254/Study/blob/master/Android/RecyclerView/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.md" target="_blank" rel="noopener">RecyclerView基础用法</a></p><p>So in my opinion, there are six steps to use RecyclerView.</p><ul><li>Add dependecy of RecyclerView</li><li>Create an activity/fragment, and use the control in it’s layout file.</li><li>Create an item, which is the model of your every list’s view.</li><li>Create a class as a model, which contains the information that is needed in every item.</li><li>Create an adapter.</li><li>Use it in your activity or fragment.</li></ul><p>The most important step is step 5, an adapter is so complicated to create. So how can we solve the problem?</p><p>There is a princple in Java: <strong>High cohesion, low coupling</strong>,so we would better to separate the viewHolder from RecyclerViewAdapter<br>So first, we can create a base adapter.</p><h2 id="BaseRecyclerViewAdapter"><a href="#BaseRecyclerViewAdapter" class="headerlink" title="BaseRecyclerViewAdapter"></a>BaseRecyclerViewAdapter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRecyclerViewAdapter</span>&lt;<span class="title">Data</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">BaseViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> List&lt;Data&gt; mDataList;</span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line">    <span class="keyword">protected</span> LayoutInflater mInflater;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mItemLayoutId;</span><br><span class="line">    <span class="keyword">private</span> OnItemClickListener mOnItemClickListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseRecyclerViewAdapter</span><span class="params">(List&lt;Data&gt; dataList, Context context, @LayoutRes <span class="keyword">int</span> itemLayoutId)</span> </span>&#123;</span><br><span class="line">        mDataList = dataList;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mInflater = LayoutInflater.from(mContext);</span><br><span class="line">        mItemLayoutId = itemLayoutId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BaseViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mOnItemClickListener.onItemClick(v, mDataList.get(position), position);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bindView(holder, mDataList.get(position));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定item中的view和数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewHolder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(BaseViewHolder viewHolder, Data item)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = mInflater.inflate(mItemLayoutId, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseViewHolder(mContext, view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDataList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataList</span><span class="params">(Collection&lt;Data&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList.clear();</span><br><span class="line">        <span class="keyword">this</span>.mDataList.addAll(data);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前列表的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Data&gt; <span class="title">getDataList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mDataList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList.add(data);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItems</span><span class="params">(Collection&lt;Data&gt; collection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList.addAll(collection);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 移除的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList.remove(data);</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除数据（带动画）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> position pos</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList.remove(position);</span><br><span class="line">        <span class="comment">//该方法不会使position及其之后位置的itemView重新onBindViewHolder</span></span><br><span class="line">        notifyItemRemoved(position);</span><br><span class="line">        <span class="comment">//所以需要从position到列表末尾进行数据刷新</span></span><br><span class="line">        notifyItemRangeChanged(position, mDataList.size() - position);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除全部数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAllItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mDataList.clear();</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取position 处数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDataList.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        notifyItemChanged(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span>&lt;<span class="title">Data</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 点击事件回调</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> position</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(View view, Data data, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span> </span>&#123;</span><br><span class="line">        mOnItemClickListener = onItemClickListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So We just look at the basic ones.<br>It’s obviou that in the class we override the three classic methods–<strong>onCreateViewHolder(),onBindViewHolder(),getItemCount()</strong>;<br>First, we create a ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = mInflater.inflate(mItemLayoutId, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseViewHolder(mContext, view);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>Then we will bind the holder to the data<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BaseViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (mOnItemClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mOnItemClickListener.onItemClick(v, mDataList.get(position), position);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bindView(holder, mDataList.get(position));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><em>we also set clicklistener to the item</em><br>We don’t directly bind the data to the view because we don’t exactly know how many data,how many controls need to be binded, so we should define an abstract method to be override in different situation. That’s why we use the <strong>bindView()</strong>.  </p><p>So we just need to override two methods–<strong>the constuction methond of your class</strong> and <strong>the bindView()</strong> if we want to use it in subclass.</p><p>The getItemCount() is so easy that we don’t talk about it.</p><hr><h2 id="BaseViewHolder"><a href="#BaseViewHolder" class="headerlink" title="BaseViewHolder"></a>BaseViewHolder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SparseArray&lt;View&gt; mViewSparseArray;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> View mItemView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseViewHolder</span><span class="params">(Context context, View itemView)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(itemView);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        mItemView = itemView;</span><br><span class="line">        mViewSparseArray = <span class="keyword">new</span> SparseArray&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从布局获取泛型view</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">protected</span> &lt;T extends View&gt; <span class="function">T <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> viewId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从已经缓存的ViewMap中查找</span></span><br><span class="line">        View view = mViewSparseArray.get(viewId);</span><br><span class="line">        <span class="comment">//如果没有缓存</span></span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//获取实例并加入缓存</span></span><br><span class="line">            view = mItemView.findViewById(viewId);</span><br><span class="line">            mViewSparseArray.append(viewId, view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置TextView类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setText</span><span class="params">(@IdRes <span class="keyword">int</span> viewId, @StringRes <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setText(viewId, mContext.getString(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setText</span><span class="params">(@IdRes <span class="keyword">int</span> viewId, String value)</span> </span>&#123;</span><br><span class="line">        TextView textView = findViewById(viewId);</span><br><span class="line">        textView.setText(value == <span class="keyword">null</span> ? mContext.getString(R.string.empty) : value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置ImageView的url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setImgUrl</span><span class="params">(@IdRes <span class="keyword">int</span> viewId, String value)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = findViewById(viewId);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Glide.with(mContext)</span><br><span class="line">                    .load(value)</span><br><span class="line">                    .transition(GenericTransitionOptions.&lt;Drawable&gt;withNoTransition())</span><br><span class="line">                    .into(imageView);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置ImageView的url</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setImgRes</span><span class="params">(@IdRes <span class="keyword">int</span> viewId, @DrawableRes <span class="keyword">int</span> drawableId)</span> </span>&#123;</span><br><span class="line">        ImageView imageView = findViewById(viewId);</span><br><span class="line">        imageView.setImageResource(drawableId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置控件是否可见</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isVisible</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setVisible</span><span class="params">(@IdRes <span class="keyword">int</span> viewId, <span class="keyword">boolean</span> isVisible)</span> </span>&#123;</span><br><span class="line">        findViewById(viewId).setVisibility(isVisible ? View.VISIBLE : View.INVISIBLE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置控件是否消失(不保留空间)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">setGone</span><span class="params">(@IdRes <span class="keyword">int</span> viewId)</span> </span>&#123;</span><br><span class="line">        findViewById(viewId).setVisibility(View.GONE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取item的View</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getItemView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mItemView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取item内部的view</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> viewId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getViewById</span><span class="params">(@IdRes <span class="keyword">int</span> viewId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findViewById(viewId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前viewHolder位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewHolderPosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAdapterPosition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The annotate is so clear, from the code of BaseRecyclerViewAdatper we can know that if we want to use the methond bindView(), we should put the parameters of viewHolder which is the type of BaseViewHolder, so in the method, we can use the methods of viewHolder such as <strong>setTxt(), setImageRes()</strong> to bind the controls the view.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定item中的view和数据</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> viewHolder</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(BaseViewHolder viewHolder, Data item)</span></span>;</span><br></pre></td></tr></table></figure></p><p>So how easy the way to use RecyclerViewAdapter can be if we use the BaseRecyclerViewAdapter? Don’t worry, there is an example<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CantDoListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseRecyclerViewAdapter</span>&lt;<span class="title">CalendarModel</span>.<span class="title">BadBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CantDoListAdapter</span><span class="params">(List&lt;CalendarModel.BadBean&gt; badBeanList, Context context, <span class="keyword">int</span> itemLayoutId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(badBeanList, context, itemLayoutId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(BaseViewHolder viewHolder, CalendarModel.BadBean item)</span> </span>&#123;</span><br><span class="line">        viewHolder.setText(R.id.item_calendar_can_do,item.getTitle())</span><br><span class="line">                .setText(R.id.item_calendar_can_do_detail,item.getDescription());</span><br><span class="line">        ImageView imageView = (ImageView)viewHolder.getItemView().findViewById(R.id.item_image_flag);</span><br><span class="line">        imageView.setBackgroundColor(mContext.getResources().getColor(R.color.red));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Is so easy, isn’t it?</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RecycelrViewAdapter的封装&quot;&gt;&lt;a href=&quot;#RecycelrViewAdapter的封装&quot; class=&quot;headerlink&quot; title=&quot;RecycelrViewAdapter的封装&quot;&gt;&lt;/a&gt;RecycelrViewAdapter的封装&lt;/h1&gt;&lt;p&gt;It’s well known that RecyclerView is a powerful tool to create a list view or a grid view, however, it’s also complicated to use.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="封装" scheme="http://yoursite.com/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Java异常</title>
    <link href="http://yoursite.com/2019/06/16/Java%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/06/16/Java异常/</id>
    <published>2019-06-16T11:01:54.000Z</published>
    <updated>2019-06-16T12:14:16.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h1><a id="more"></a><ol><li><strong>throws &amp; throw</strong><br>如果方法声明后有throw语句，则在此方法被调用时，需要<strong>在调用方法中用try和catch进行异常捕获</strong>，如果不捕获异常，则需要在调用方法中使用throws语句将异常抛出。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span><span class="keyword">throws</span> Exception,IllegalArgumentException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"a=0,silly boy!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">1</span>) &#123;</span><br><span class="line">IllegalArgumentException str=<span class="keyword">new</span> IllegalArgumentException(<span class="string">"a=1, IllegalArgumentException"</span>);</span><br><span class="line"><span class="keyword">throw</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Scanner t = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">a = t.nextInt();</span><br><span class="line">A(a);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IllegalArgumentException e2) &#123;</span><br><span class="line">System.out.println(e2.toString());</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如我们在上面的代码里定义了一个A方法，在这个方法里我们用<strong>throws</strong>声明了可能抛出的异常，然后我们需要在方法体里把异常实例化并且利用<strong>throw</strong>将其抛出。</p><p>在主方法中，我们利用<strong>try-catch</strong>语句，将可能出现异常的语句用try包括起来，然后利用catch语句来承接这个异常，并且输出异常。</p><p>那么接下来就是另外一个问题</p><ol start="2"><li><strong>toString, getMessage, printStackTrace</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span><span class="keyword">throws</span> Exception,IllegalArgumentException</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"a=0,silly boy!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">1</span>) &#123;</span><br><span class="line">IllegalArgumentException str=<span class="keyword">new</span> IllegalArgumentException(<span class="string">"a=1, bitch"</span>);</span><br><span class="line"><span class="keyword">throw</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Scanner t = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">a = t.nextInt();</span><br><span class="line">A(a);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IllegalArgumentException e2) &#123;</span><br><span class="line">System.out.println(e2.toString());</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(e2.getMessage());</span><br><span class="line">System.out.println();</span><br><span class="line">e2.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>输入1，结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: a=<span class="number">1</span>, bitch</span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>, bitch</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: a=<span class="number">1</span>, bitch</span><br><span class="line">at 异常.Main.A(Main.java:<span class="number">10</span>)</span><br><span class="line">at 异常.Main.main(Main.java:<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><ol start="3"><li><strong>最后还有一点，子类父类的问题</strong><br>子类异常要放在前面，父类异常要写在后面  </li></ol><p><img src="http://dl2.iteye.com/upload/attachment/0120/1194/9c234fae-d8be-3479-8275-ffceee4c7b84.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java异常&quot;&gt;&lt;a href=&quot;#Java异常&quot; class=&quot;headerlink&quot; title=&quot;Java异常&quot;&gt;&lt;/a&gt;Java异常&lt;/h1&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>OJ_Tower of Hanoi</title>
    <link href="http://yoursite.com/2019/06/15/OJ-Tower-of-Hanoi/"/>
    <id>http://yoursite.com/2019/06/15/OJ-Tower-of-Hanoi/</id>
    <published>2019-06-15T15:20:23.000Z</published>
    <updated>2019-06-15T17:08:23.008Z</updated>
    
    <content type="html"><![CDATA[<p>I still remember the day when I was sitting in the classroom of Mr.Wang(<em>Wang Hexing is a handsome teacher</em>)listening him to talking about the question–<strong>Tower of Hanoi</strong>, and I still remember the confusion in my little head.<br><a id="more"></a><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/title.jpg" alt><br>Just as the saying goes: <em>The man who comes out to play is always have to pay back</em>.  I finally met it on NEUQ_oj.  </p><p>I think it’s time for me to know what the Tower of Hanoi is and find out how to solve it.</p><h3 id="The-question"><a href="#The-question" class="headerlink" title="The question:"></a>The question:</h3><blockquote><p>The problem of the Tower of Hanoi (also known as the Hanoi Tower) is an educational toy derived from an ancient legend of India. When Brahma created the world, he made three diamond pillars, and on a pillar, he smashed 64 gold discs in order of size from bottom to top. Brahma ordered the Brahmin to reposition the discs on the other column in order of size from below. It is also stipulated that the disc cannot be enlarged on the small disc, and only one disc can be moved at a time between the three columns.</p></blockquote><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>It’s obviously that we should use the <strong>recursive function</strong>, but the question is ‘How’?</p><p>First, let’s find some laws in the question.Look at the pictures:</p><ul><li><strong>The number of discs is one</strong><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/1.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/2.png" alt></li></ul><hr><ul><li><strong>The number of discs is two</strong></li></ul><p><img src="/2019/06/15/OJ-Tower-of-Hanoi/14.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/3.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/4.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/5.png" alt></p><p><em>In this part, we use the pillar B as a transformer station, what? transformer station? Don’t worry, We will explain the usage of it.</em></p><hr><ul><li><strong>The number of discs is three</strong></li></ul><p><img src="/2019/06/15/OJ-Tower-of-Hanoi/6.png" alt></p><p><strong>First we should know our target. We want to move the all pillars to pillar C. It’s obvious that it is impossible to make it at once. So we should find a transformer station. We can move the green one and blue one to pillar B.</strong></p><p><img src="/2019/06/15/OJ-Tower-of-Hanoi/7.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/8.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/9.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/10.png" alt></p><p><strong>So we can use the way in the situation of two discs to move green and blue to B, and then move the red one to C</strong></p><p><img src="/2019/06/15/OJ-Tower-of-Hanoi/11.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/12.png" alt><br><img src="/2019/06/15/OJ-Tower-of-Hanoi/13.png" alt></p><p><strong>The last thing we should do is to use the same way of situation of two discs and think pillar A as a transfer station</strong></p><hr><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>We have analyze the basic idea of Hanoi, so it is time for us to explore the way to achieve it in code.</p><p>As I have said on the begin of the passage, we should use the recursive fuction, because it’s the simplest way to solve the question.</p><p>the parameter is four:</p><ul><li>the number of discs</li><li>the pillar that the discs you want to move exist.</li><li>the transfer station</li><li>the target pillar at every step</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void hanoi(int n, char A, char B, char C)&#123;</span><br><span class="line">    if(n == 1)&#123;</span><br><span class="line">        printf(&quot;Move sheet %d from %c to %c\n&quot;,n,A,C);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //as we can see, if we want get the result of n,</span><br><span class="line">//we should move n - 1 first, so here we need to</span><br><span class="line">//use the way of recursion</span><br><span class="line"></span><br><span class="line">//here we need to move the n - 1 smaller discs from </span><br><span class="line">//A to B</span><br><span class="line">hanoi(n-1, A,C,B);</span><br><span class="line"></span><br><span class="line">//here we move the left biggest one from A to C</span><br><span class="line">printf(&quot;Move sheet %d from %c to %c\n&quot;,n,A,C);</span><br><span class="line"></span><br><span class="line">//here we move the n - 1 samller discs from B to C</span><br><span class="line">hanoi(n-1, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>If there is any error, please contract with me and teach me how to correct it or I can try my best to correct it myself. I am just a vegetable chicken.</p><p>Please bear with me.<br>o((⊙﹏⊙))o.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*      </span><br><span class="line">*          ┌─┐       ┌─┐</span><br><span class="line">*       ┌──┘ ┴───────┘ ┴──┐</span><br><span class="line">*       │                 │</span><br><span class="line">*       │       ───       │</span><br><span class="line">*       │  ─┬┘       └┬─  │</span><br><span class="line">*       │                 │</span><br><span class="line">*       │       ─┴─       │</span><br><span class="line">*       │                 │</span><br><span class="line">*       └───┐         ┌───┘</span><br><span class="line">*           │         │</span><br><span class="line">*           │         │</span><br><span class="line">*           │         │</span><br><span class="line">*           │         └──────────────┐</span><br><span class="line">*           │                        │</span><br><span class="line">*           │                        ├─┐</span><br><span class="line">*           │                        ┌─┘    </span><br><span class="line">*           │                        │</span><br><span class="line">*           └─┐  ┐  ┌───────┬──┐  ┌──┘         </span><br><span class="line">*             │ ─┤ ─┤       │ ─┤ ─┤         </span><br><span class="line">*             └──┴──┘       └──┴──┘ </span><br><span class="line">*                 神兽保佑 </span><br><span class="line">*                 代码无BUG! </span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I still remember the day when I was sitting in the classroom of Mr.Wang(&lt;em&gt;Wang Hexing is a handsome teacher&lt;/em&gt;)listening him to talking about the question–&lt;strong&gt;Tower of Hanoi&lt;/strong&gt;, and I still remember the confusion in my little head.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algrithom" scheme="http://yoursite.com/categories/algrithom/"/>
    
      <category term="Tower of Hanoi" scheme="http://yoursite.com/categories/algrithom/Tower-of-Hanoi/"/>
    
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
      <category term="algrithom" scheme="http://yoursite.com/tags/algrithom/"/>
    
  </entry>
  
  <entry>
    <title>Java_deepToString方法</title>
    <link href="http://yoursite.com/2019/06/14/Java-deepToString%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/06/14/Java-deepToString方法/</id>
    <published>2019-06-14T07:15:18.000Z</published>
    <updated>2019-06-14T07:15:18.618Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NEUQOJ-1016-Roliygu&amp;Yilan</title>
    <link href="http://yoursite.com/2019/06/12/NEUQOJ-1016-Roliygu-Yilan/"/>
    <id>http://yoursite.com/2019/06/12/NEUQOJ-1016-Roliygu-Yilan/</id>
    <published>2019-06-12T07:27:19.000Z</published>
    <updated>2019-06-12T08:01:34.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote><p>Roliygu is famous because he likes to play games. Today he puts a chessboard in the desktop,and plays a game with Yilan. The size of the chessboard is n by n. A stone is placed in a corner square. They play alternatively with Roliygu having the first move. Each time,player is allowed to move the stone to an unvisited neighbor square horizontally or vertically. The one who can’t make a move will lose the game. If both play perfectly, who will win the game?</p></blockquote><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><blockquote><p>The input is a sequence of positive integers each in a separate line. The integers are between 1 and 10 000,inclusive,indicating the size of the chessboard. The end of the input is indicated by a zero.  </p></blockquote><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><blockquote><p>Output the winner(“Roliygu” or “Yilan”) for each input line except the last zero. No other characters should be inserted in the output.</p></blockquote><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>This question is hard if we try to solve it just as the description of the question, however, we can change our mind to think about the question, can we get the result of who will win if we just know the <strong>odevity</strong> of the grid of the board and the <strong>upper-hand player</strong>? The anwser is YES!</p><p>Let’s look at the two pictures below:</p><p><img src="/2019/06/12/NEUQOJ-1016-Roliygu-Yilan/1.jpg" alt></p><p><img src="/2019/06/12/NEUQOJ-1016-Roliygu-Yilan/2.jpg" alt></p><p>if the grids’ number is even, if obvious that all of the grids and be divided into some pices of 1*2, what is very important for you to know is that the start point is in one grid, so the left grids’ number is actually odd, so you can know that <strong>who first, who win</strong>;</p><p>In the same way we can know that if the grids’ number is odd, the number except the start point will be even, so <strong>who later, who win</strong>;</p><p>So the question has been changed into <strong>Jugement of the odevity of the board’s grids number</strong>, it’s easy, isn’t it?</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while(cin&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(n * n % 2 == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;&quot;Roliygu&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;&quot;Yilan&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Roliygu is famous because he likes to play games. Today he puts a chessboard in the desktop,and plays a game with Yilan. The size of the chessboard is n by n. A stone is placed in a corner square. They play alternatively with Roliygu having the first move. Each time,player is allowed to move the stone to an unvisited neighbor square horizontally or vertically. The one who can’t make a move will lose the game. If both play perfectly, who will win the game?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="NEUQOJ" scheme="http://yoursite.com/categories/NEUQOJ/"/>
    
      <category term="1016" scheme="http://yoursite.com/categories/NEUQOJ/1016/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="OJ" scheme="http://yoursite.com/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>some idea about sign out</title>
    <link href="http://yoursite.com/2019/06/04/some-idea-about-sign-out/"/>
    <id>http://yoursite.com/2019/06/04/some-idea-about-sign-out/</id>
    <published>2019-06-04T01:37:43.000Z</published>
    <updated>2019-06-04T01:37:43.130Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android_sharepreference_commit&amp;apply</title>
    <link href="http://yoursite.com/2019/06/03/Android-sharepreference-commit-apply/"/>
    <id>http://yoursite.com/2019/06/03/Android-sharepreference-commit-apply/</id>
    <published>2019-06-03T07:11:56.000Z</published>
    <updated>2019-06-03T07:17:58.750Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://blog.csdn.net/jake9602/article/details/18414841" target="_blank" rel="noopener">SharedPreference.Editor的apply和commit方法异同</a><br><a id="more"></a><br>在android 中存储数据时经常用SharedPreference, 并且在提交数据时一直用的是Editor的commit方法, 今天无意了看到了系统用了apply,看了方法的介绍, 原来这个方法也是可以提交数据的.<br>apply方法在官方SDK说明如下：  </p><blockquote><p>Commit your preferences changes back from this Editor to the SharedPreferences object it is editing. This atomically performs the requested modifications, replacing whatever is currently in the SharedPreferences.<br>Note that when two editors are modifying preferences at the same time, the last one to call apply wins.<br>Unlike commit, which writes its preferences out to persistent storage synchronously, apply commits its changes to the in-memory SharedPreferences immediately but starts an asynchronous commit to disk and you won’t be notified of any failures. If another editor on this SharedPreferences does a regular commit while a apply is still outstanding, the commit will block until all async commits are completed as well as the commit itself.<br>As SharedPreferences instances are singletons within a process, it’s safe to replace any instance of commit with apply if you were already ignoring the return value.<br>You don’t need to worry about Android component lifecycles and their interaction with apply() writing to disk. The framework makes sure in-flight disk writes from apply() complete before switching states.<br>The SharedPreferences.Editor interface isn’t expected to be implemented directly. However, if you previously did implement it and are now getting errors about missing apply(), you can simply call commit from apply().    </p></blockquote><p>这两个方法的区别在于： </p><ol><li>apply没有返回值而commit返回boolean表明修改是否提交成功 </li><li>apply是将修改数据原子提交到内存, 而后异步真正提交到硬件磁盘, 而commit是同步的提交到硬件磁盘，因此，在多个并发的提交commit的时候，他们会等待正在处理的commit保存到磁盘后在操作，从而降低了效率。而apply只是原子的提交到内容，后面有调用apply的函数的将会直接覆盖前面的内存数据，这样从一定程度上提高了很多效率。 </li><li>apply方法不会提示任何失败的提示。<br>由于在一个进程中，sharedPreference是单实例，一般不会出现并发冲突，如果对提交的结果不关心的话，建议使用apply，当然需要确保提交成功且有后续操作的话，还是需要用commit的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;https://blog.csdn.net/jake9602/article/details/18414841&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SharedPreference.Editor的apply和commit方法异同&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="sharedpreference" scheme="http://yoursite.com/categories/Android/sharedpreference/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-26-删除相同元素</title>
    <link href="http://yoursite.com/2019/06/02/leetcode-08-%E5%88%A0%E9%99%A4%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2019/06/02/leetcode-08-删除相同元素/</id>
    <published>2019-06-02T14:46:54.000Z</published>
    <updated>2019-06-03T07:17:28.234Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br><a id="more"></a></p><p>示例 1:</p><blockquote><p>给定数组 nums = [1,1,2], </p></blockquote><blockquote><p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p></blockquote><blockquote><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p>示例 2:</p><blockquote><p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p></blockquote><blockquote><p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p></blockquote><blockquote><p>你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>说明:</strong></p><p><em>为什么返回数值是整数，但输出的答案是数组呢?</em></p><p><em>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</em></p><p><em>你可以想象内部操作如下:</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int removeDuplicates(int[] nums) &#123;</span><br><span class="line">        if( nums.length == 0)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        int i = 0;</span><br><span class="line">        for( int j = 1; j &lt; nums.length; j++)&#123;</span><br><span class="line">            if( nums[j] != nums[i] )&#123;</span><br><span class="line">                i++;</span><br><span class="line">                nums[i] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return i+1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以一个整型数组为例</p><blockquote><p>1 2 2 3 4</p></blockquote><p>传入的为数组的引用，所以更改对用户是可见的</p><ul><li>如果长度为零，直接返回零</li><li>如果不为零，i = 0；进入循环 j = 1;<ul><li>nums[j] = 2,nums[j] != nums[i] <ul><li>i++ 变成了1；</li><li>nums[i] = nums[j] = 2;</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。&lt;/p&gt;
&lt;p&gt;不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
      <category term="删除相同元素" scheme="http://yoursite.com/categories/Leetcode/%E5%88%A0%E9%99%A4%E7%9B%B8%E5%90%8C%E5%85%83%E7%B4%A0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Green公式</title>
    <link href="http://yoursite.com/2019/05/25/Green%E5%85%AC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/05/25/Green公式/</id>
    <published>2019-05-25T10:37:13.000Z</published>
    <updated>2019-05-25T10:37:13.326Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode_合并链表</title>
    <link href="http://yoursite.com/2019/05/24/leetcode-%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/05/24/leetcode-合并链表/</id>
    <published>2019-05-24T11:29:50.000Z</published>
    <updated>2019-05-25T10:27:02.465Z</updated>
    
    <content type="html"><![CDATA[<p>21.将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：  </p><blockquote><p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><p>（友情链接 —&gt;<a href="https://www.cnblogs.com/ysocean/p/7928988.html" target="_blank" rel="noopener">Java数据结构和算法（七）——链表 </a>)<br><a id="more"></a></p><p>首先先看看怎么做这道题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</span><br><span class="line">        if(l2 == null)&#123;</span><br><span class="line">            return l1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(l1 == null)&#123;</span><br><span class="line">            return l2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode temp;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">            if (l1.val &lt; l2.val)&#123;</span><br><span class="line">                temp = l1;</span><br><span class="line">                temp.next = mergeTwoLists(l1.next,l2);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                temp = l2;</span><br><span class="line">                temp.next = mergeTwoLists(l1,l2.next);</span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line">        return temp;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先我们要知道Java链表是个啥玩意，先看个实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">import javax.xml.soap.Node;</span><br><span class="line"></span><br><span class="line">public class SingleLinkedList &#123;</span><br><span class="line"></span><br><span class="line">private int size;</span><br><span class="line">private Node head;</span><br><span class="line"></span><br><span class="line">public SingleLinkedList() &#123;</span><br><span class="line">size = 0;</span><br><span class="line">head = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//链表的每个节点类</span><br><span class="line">private class Node&#123;</span><br><span class="line">private Object data;</span><br><span class="line">private Node next;</span><br><span class="line"></span><br><span class="line">public Node(Object data) &#123;</span><br><span class="line">this.data = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在链表头添加元素</span><br><span class="line">public Object addHead(Object obj) &#123;</span><br><span class="line">Node newHead = new Node(obj);</span><br><span class="line">if(size == 0) &#123;</span><br><span class="line">head = newHead;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">newHead.next = head;</span><br><span class="line">head = newHead;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在链表头删除元素</span><br><span class="line">public Object deleteHead() &#123;</span><br><span class="line">Object obj = head.data;</span><br><span class="line">head = head.next;</span><br><span class="line">size--;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查找指定元素，找到了返回Node,找不到返回null</span><br><span class="line">public Node find(Object obj) &#123;</span><br><span class="line">Node current = head;</span><br><span class="line">int tempSize = size;</span><br><span class="line">while(tempSize &gt; 0) &#123;</span><br><span class="line">if (obj.equals(current.data)) &#123;</span><br><span class="line">return current;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">tempSize--;</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除指定的元素，删除成功返回true</span><br><span class="line">public boolean delete(Object value) &#123;</span><br><span class="line">if(size == 0) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node current = head;</span><br><span class="line">Node previous = head;</span><br><span class="line">while(current.data != value) &#123;</span><br><span class="line">if(current.next == null) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">previous = current;</span><br><span class="line">current = current.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(current == head) &#123;</span><br><span class="line">head = current.next;</span><br><span class="line">size--;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">previous.next = current.next;</span><br><span class="line">size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断链表是否为空</span><br><span class="line">public boolean isEmpty() &#123;</span><br><span class="line">return (size == 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示节点信息</span><br><span class="line">public void display() &#123;</span><br><span class="line">if (size &gt; 0) &#123;</span><br><span class="line">Node node = head;</span><br><span class="line">int tempSize = size;</span><br><span class="line">if(tempSize == 1) &#123;//当前链表只有一个节点</span><br><span class="line">System.out.println(&quot;[&quot;+node.data+&quot;]&quot;);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">while(tempSize &gt; 0) &#123;</span><br><span class="line">if(node.equals(head)) &#123;</span><br><span class="line">    System.out.print(&quot;[&quot;+node.data+&quot;-&gt;&quot;);</span><br><span class="line">&#125;else if(node.next == null) &#123;</span><br><span class="line">System.out.print(node.data+&quot;]&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.print(node.data+&quot;-&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">node = node.next;</span><br><span class="line">tempSize--;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;[]&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。<br>　　使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p></blockquote><h2 id="单链表-我这种菜鸡只能谈论这种最简单的链表了"><a href="#单链表-我这种菜鸡只能谈论这种最简单的链表了" class="headerlink" title="单链表(我这种菜鸡只能谈论这种最简单的链表了)"></a>单链表(我这种菜鸡只能谈论这种最简单的链表了)</h2><blockquote><p>单链表是链表中结构最简单的。一个单链表的节点(Node)分为两个部分，第一个部分(data)保存或者显示关于节点的信息，另一个部分存储下一个节点的地址。最后一个节点存储地址的部分指向空值。<br>　　单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。而插入一个节点，对于单向链表，我们只提供在链表头插入，只需要将当前插入的节点设置为头节点，next指向原头节点即可。删除一个节点，我们将该节点的上一个节点的next指向该节点的下一个节点。</p></blockquote><h2 id="关于本题"><a href="#关于本题" class="headerlink" title="关于本题"></a>关于本题</h2><p>那么结合本题，我们可以从题意中得知，要把valu小的放在前。</p><ul><li>第一步，传进两个链表</li><li>第二步，判断哪个是空，一个空，返回另一个</li><li>第三步，声明一个新的链表temp作为中间链表<ul><li>如果l1.valu &lt; l2.valu <ul><li>temp = l1</li><li>temp.next的地址则需要通过递归进行新一轮的比较，所以temp.next = mergeTowLists(l1.next, l2)<br>……</li></ul></li><li>else<ul><li>temp = l2</li><li>temp.next的地址则需要通过递归进行新一轮的比较，So, temp.next = mergeTowLists(l1, l2.next)<br>……</li></ul></li></ul></li><li>第四步，以上递归进行完了，就可以将最终的temp返回了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;21.将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;br&gt;示例：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;br&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（友情链接 —&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/ysocean/p/7928988.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java数据结构和算法（七）——链表 &lt;/a&gt;)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
      <category term="合并链表" scheme="http://yoursite.com/categories/Leetcode/%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_最长公共前缀</title>
    <link href="http://yoursite.com/2019/05/18/leetcode-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>http://yoursite.com/2019/05/18/leetcode-最长公共前缀/</id>
    <published>2019-05-18T04:00:21.000Z</published>
    <updated>2019-05-19T06:09:31.052Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。  </p><blockquote><p>示例 1:<br>输入: [“flower”,”flow”,”flight”]<br>输出: “fl”  </p></blockquote><blockquote><p>示例 2:<br>输入: [“dog”,”racecar”,”car”]<br>输出: “”<br>解释: 输入不存在公共前缀。  </p></blockquote><a id="more"></a><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Solution&#123;</span><br><span class="line">    public String maxCommon(String[] s)&#123;</span><br><span class="line">        if ( s.length == 0 )&#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String len = s[0];</span><br><span class="line">        for ( int i = 1; i &lt; s.length; i++)&#123;</span><br><span class="line">           while( s[i].indexOf(len) != 0 )&#123;</span><br><span class="line">                len = len.substring(0, len.length() - 1);</span><br><span class="line">                if(len.isEmpty())&#123;</span><br><span class="line">                    return &quot;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="先看看是不是空的"><a href="#先看看是不是空的" class="headerlink" title="先看看是不是空的"></a>先看看是不是空的</h2><p>如果s根本就没有任何数据，那还判断毛线？直接返回个空字符串就行了呗；</p><h2 id="找一个串当基础"><a href="#找一个串当基础" class="headerlink" title="找一个串当基础"></a>找一个串当基础</h2><p>反正是找公共前缀，那么这个公共前缀一定存在于每个串中。那么我就拿第一个字符串s[0]当一个基础，声明一个字符串len,等于s[0];</p><h2 id="循环判断"><a href="#循环判断" class="headerlink" title="循环判断"></a>循环判断</h2><p>从第二个字符串开始，进行判断。利用indesOf()方法，看看len是不是在s[i]字符串中并且是不是从0下标开始的。</p><ul><li>如果是，终止while循环</li><li>如果不是，那就让len减去最后一个字符，继续循环。<ul><li>如果一直循环到len人家一点不剩了，s[i]里面还是没有跟它一致的，那凉了，这几个字符串没有公共前缀。返回空字符串。<h2 id="一直循环下去"><a href="#一直循环下去" class="headerlink" title="一直循环下去"></a>一直循环下去</h2>最后返回len就可以了。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;br&gt;如果不存在公共前缀，返回空字符串 “”。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: [“flower”,”flow”,”flight”]&lt;br&gt;输出: “fl”  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 2:&lt;br&gt;输入: [“dog”,”racecar”,”car”]&lt;br&gt;输出: “”&lt;br&gt;解释: 输入不存在公共前缀。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
      <category term="最长公共前缀" scheme="http://yoursite.com/categories/Leetcode/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_整数转罗马数字</title>
    <link href="http://yoursite.com/2019/05/16/leetcode-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2019/05/16/leetcode-整数转罗马数字/</id>
    <published>2019-05-16T09:46:42.000Z</published>
    <updated>2019-05-16T13:50:35.699Z</updated>
    
    <content type="html"><![CDATA[<p>罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 </li></ul><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public String intToRoman(int num) &#123;</span><br><span class="line"></span><br><span class="line">        //create an unique dictionary</span><br><span class="line"></span><br><span class="line">        int [] values= &#123;1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1&#125;;</span><br><span class="line">        String[]  rom= &#123;&quot;M&quot;, &quot;CM&quot;, &quot;D&quot;, &quot;CD&quot;, &quot;C&quot;, &quot;XC&quot;, &quot;L&quot;, &quot;XL&quot;, &quot;X&quot;, &quot;IX&quot;, &quot;V&quot;, &quot;IV&quot;, &quot;I&quot;&#125;;</span><br><span class="line">        int a;</span><br><span class="line">        StringBuilder str = new StringBuilder();</span><br><span class="line">        for ( int i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">            a = num / values[i];</span><br><span class="line">            if ( a == 0) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            for ( int j = a; j &gt; 0; j--)&#123;</span><br><span class="line">                str.append(rom[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            num = num - values[i] * a;</span><br><span class="line">            if ( num == 0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="这个代码有几点很关键"><a href="#这个代码有几点很关键" class="headerlink" title="这个代码有几点很关键"></a>这个代码有几点很关键</h2><ul><li>创建字典</li><li>a 的使用</li></ul><p>创建字典大家应该都很清楚，一个数组和一个字符串数组，两者的下标对应；</p><h2 id="接下来就是重点了："><a href="#接下来就是重点了：" class="headerlink" title="接下来就是重点了："></a>接下来就是重点了：</h2><p>咱们先拿一个数当例子 比如58</p><ul><li>总共就这几个罗马数字，先从大到小遍历。</li><li>58 / 1000 ？不行，1000太大，58承受不住；900 ？ 500？ 90？ 50？ 停，50可以哎，先把 L 选上。 几个L？<code>a = num / values[i] = 1</code>, 一个，好，那就先用str.append()方法把i下标对应的罗马数字加到str里面。</li><li>58 里已经确定有一个L了，还剩下多少？<code>num - a * values[i] = 8</code>，</li><li>继续轮回，40？ 10？ 9？ 5可以，<code>a = num / values[i] = 1</code>，再追加一个V。现在是LV了,还剩<code>num = num - a * values[i] = 3</code>。</li><li>最后一轮，<code>a = num / values[i] = 3</code>， 再追加三个I。即 LVIII；</li></ul><h2 id="最后很重要的一点，返回的是str-toString"><a href="#最后很重要的一点，返回的是str-toString" class="headerlink" title="最后很重要的一点，返回的是str.toString()"></a>最后很重要的一点，返回的是str.toString()</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;字符          数值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I             1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V             5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X             10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L             50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C             100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D             500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M             1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
      <category term="整数转罗马数字" scheme="http://yoursite.com/categories/Leetcode/%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode_有效括号</title>
    <link href="http://yoursite.com/2019/05/16/leetcode-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2019/05/16/leetcode-有效括号/</id>
    <published>2019-05-16T05:47:11.000Z</published>
    <updated>2019-05-16T05:51:15.026Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。<br><a id="more"></a></p><blockquote><p>示例 1:<br>输入: “()”<br>输出: true  </p></blockquote><blockquote><p>示例 2:<br>输入: “()[]{}”<br>输出: true  </p></blockquote><blockquote><p>示例 3:<br>输入: “(]”<br>输出: false  </p></blockquote><blockquote><p>示例 4:<br>输入: “([)]”<br>输出: false  </p></blockquote><blockquote><p>示例 5:<br>输入: “{[]}”<br>输出: true  </p></blockquote><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class Solution&#123;</span><br><span class="line"></span><br><span class="line">     public boolean isValid(String s)&#123;</span><br><span class="line">         Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;;</span><br><span class="line">         for (char alp : s.toCharArray())&#123;</span><br><span class="line">             if(alp == &apos;(&apos; )&#123;</span><br><span class="line">                 stack.push(&apos;)&apos;);</span><br><span class="line">             &#125;else if(alp == &apos;&#123;&apos;)&#123;</span><br><span class="line">                 stack.push(&apos;&#125;&apos;);</span><br><span class="line">             &#125;else if(alp == &apos;[&apos;)&#123;</span><br><span class="line">                 stack.push(&apos;]&apos;);</span><br><span class="line">             &#125;else if(stack.isEmpty()||stack.pop()!= alp)&#123;</span><br><span class="line">                 return false;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         return stack.isEmpty();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不长，一点一点看 </p><h2 id="首先，建立一个栈实例stack"><a href="#首先，建立一个栈实例stack" class="headerlink" title="首先，建立一个栈实例stack"></a>首先，建立一个栈实例stack</h2><p>记住他是后进先出<br>不了解Stack和Character的同学请点击<br>–&gt;<a href="http://www.runoob.com/java/java-stack-class.html" target="_blank" rel="noopener">Stack类</a><br>–&gt;<a href="http://www.runoob.com/java/java-character.html" target="_blank" rel="noopener">Character类</a></p><p>有了一个栈，我们就有空去装东西了。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>for循环里进行遍历，我们首先假设这个字符串是”( ( ( { } ) ) ) }”,那么结合实例，接下来代码的主要思想是：</p><ul><li>如果我遇到一个左括号，就往栈里加一个与这对应的右括号</li><li>如果是右括号，比如第五个括号，那么就跟栈顶元素对比并且顶部元素出栈（栈是后进先出的，第五个括号是跟第四个对应的，所以遍历到第四个时往栈里添加的括号按照常理应该是跟第五个一样的）<ul><li>如果对比不一样，false</li></ul></li><li>由于对比一次就出栈一次，如果出完了，stack说自己一滴都不剩了，可alp居然还在遍历，有问题，原来的字符串绝对是奇数个字符，false</li><li>如果运行到最后，没啥问题，判断stack,如果还剩元素，说明原来的右括号比左括号少，直接返回stack.isEmpty()就行了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;br&gt;有效字符串需满足：&lt;br&gt;左括号必须用相同类型的右括号闭合。&lt;br&gt;左括号必须以正确的顺序闭合。&lt;br&gt;注意空字符串可被认为是有效字符串。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
      <category term="有效括号" scheme="http://yoursite.com/categories/Leetcode/%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android-px_dp</title>
    <link href="http://yoursite.com/2019/04/20/Android-px-dp/"/>
    <id>http://yoursite.com/2019/04/20/Android-px-dp/</id>
    <published>2019-04-20T13:16:10.000Z</published>
    <updated>2019-05-06T13:45:28.942Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>DeBug日志-Android-用户名只能是数字</title>
    <link href="http://yoursite.com/2019/04/02/DeBug%E6%97%A5%E5%BF%97-Android-%E7%94%A8%E6%88%B7%E5%90%8D%E5%8F%AA%E8%83%BD%E6%98%AF%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2019/04/02/DeBug日志-Android-用户名只能是数字/</id>
    <published>2019-04-02T01:57:40.000Z</published>
    <updated>2019-04-02T01:57:40.604Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第四周学习进度</title>
    <link href="http://yoursite.com/2019/03/30/%E7%AC%AC%E5%9B%9B%E5%91%A8%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    <id>http://yoursite.com/2019/03/30/第四周学习进度/</id>
    <published>2019-03-30T12:57:46.000Z</published>
    <updated>2019-03-31T01:17:03.659Z</updated>
    
    <content type="html"><![CDATA[<p>因为有两张图片存在本地看不了，我已经把这个上传到博客里了，如果学长要看的话就点击<br>–&gt;<a href="https://han1254.github.io/2019/03/30/第四周学习进度/#more" target="_blank" rel="noopener">第四周学习进度</a></p><h1 id="本周学习进度"><a href="#本周学习进度" class="headerlink" title="本周学习进度"></a>本周学习进度</h1><h2 id="Android"><a href="#Android" class="headerlink" title="Android:"></a>Android:</h2><ul><li>ReBy的登陆和注册功能基本完成。使用了SQLite方法进行数据储存。不足之处：还没有实现自动登陆功能。  </li><li><p>在学长的帮助下，利用Debug功能修改代码。<br>–&gt;<a href="https://han1254.github.io/2019/03/30/Debug日志-Android-SQLite/#more" target="_blank" rel="noopener">Debug日志-Android-SQLite</a></p></li><li><p>学习了利用Cursor的moveToFirst()方法，判断账号是否已经存在于数据库中，cursor的具体实现原理我写到了gitbub中。<br>–&gt;<a href="https://github.com/han1254/Study/blob/master/Android/Cursor那点事.md" target="_blank" rel="noopener">Cursor那点事</a></p></li><li>在学长的指导下，学习使用values,里面的数据相当于是全局变量，通过引用，方便以后的数据更改，从而使自己的代码更加规范。</li></ul><hr><p>除此之外，在写app的过程中，还学习了一些比较小的技巧。</p><ul><li>trim函数</li><li>设置下划线和光标的颜色</li><li>设置按钮的描边</li><li>设置Edittext的输入限制  </li><li>状态栏的透明与半透明</li><li>ActionBar的删除  </li><li>状态栏的颜色设置</li><li>活动的启动模式</li><li>密码的隐藏</li><li>git删除远程仓库的文件夹<br>这些小技巧的用法我已经总结下来并且传到了github中。<br>–&gt;<a href="https://github.com/han1254/Study/blob/master/Android/LittleTip.md" target="_blank" rel="noopener">LittleTip</a></li></ul><hr><h1 id="下周计划："><a href="#下周计划：" class="headerlink" title="下周计划："></a>下周计划：</h1><h2 id="Reby"><a href="#Reby" class="headerlink" title="Reby"></a>Reby</h2><ul><li>完成自动登陆功能</li><li>利用Fragment完成利用底部导航栏进行界面切换的功能。</li><li>完成推出登陆功能<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2>由于上半学期一直没好好学算法，导致自己的工很不扎实。下周开始，利用PTA，尽量达到每一到两天一道算法题（利用Java和C++都实现一下）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为有两张图片存在本地看不了，我已经把这个上传到博客里了，如果学长要看的话就点击&lt;br&gt;–&amp;gt;&lt;a href=&quot;https://han1254.github.io/2019/03/30/第四周学习进度/#more&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="学习进度" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%BF%9B%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Debug日志-Android-SQLite</title>
    <link href="http://yoursite.com/2019/03/30/Debug%E6%97%A5%E5%BF%97-Android-SQLite/"/>
    <id>http://yoursite.com/2019/03/30/Debug日志-Android-SQLite/</id>
    <published>2019-03-30T10:54:04.000Z</published>
    <updated>2019-03-30T11:06:58.567Z</updated>
    
    <content type="html"><![CDATA[<p>三月二十九日，遇到了一个关于SQLite的Bug。<br><a id="more"></a><br><img src="/2019/03/30/Debug日志-Android-SQLite/bug2.PNG" alt><br>其结果就是，每次我在登陆界面只要一填完账号密码，再点击登陆，就会闪退。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">package com.example.reby;</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line"></span><br><span class="line">public class LoginActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line">    private EditText edit_account, edit_password;</span><br><span class="line">    private Button btn_login,btn_register;</span><br><span class="line">    private DBHelper dbHelper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        //设置状态栏的全透明</span><br><span class="line">       /* if (Build.VERSION.SDK_INT &gt;= 21) &#123;</span><br><span class="line">           View decorView = getWindow().getDecorView();</span><br><span class="line">           decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br><span class="line">           getWindow().setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">        &#125;*/</span><br><span class="line">       //设置状态栏的半透明</span><br><span class="line">        if(Build.VERSION.SDK_INT &gt;= 21) &#123;</span><br><span class="line">            getWindow().setFlags(</span><br><span class="line">                    WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS,</span><br><span class="line">                    WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">        &#125;</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        if(actionBar != null)&#123;</span><br><span class="line">            actionBar.hide();</span><br><span class="line">        &#125;</span><br><span class="line">        activityInit();</span><br><span class="line">    &#125;</span><br><span class="line">    public void activityInit()&#123;</span><br><span class="line">        edit_account = (EditText) findViewById(R.id.et_login_account);</span><br><span class="line">        edit_account.setOnEditorActionListener(new TextView.OnEditorActionListener()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) &#123;</span><br><span class="line">                if(actionId == EditorInfo.IME_ACTION_DONE)&#123;</span><br><span class="line">                    edit_account.clearFocus();</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        edit_password = (EditText)findViewById(R.id.et_login_password);</span><br><span class="line">        //密码隐藏</span><br><span class="line">        edit_password.setTransformationMethod(PasswordTransformationMethod.getInstance());</span><br><span class="line">        edit_password.setOnEditorActionListener(new TextView.OnEditorActionListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) &#123;</span><br><span class="line">                if(actionId == EditorInfo.IME_ACTION_DONE)&#123;</span><br><span class="line">                    edit_password.clearFocus();</span><br><span class="line">                &#125;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        btn_login = (Button)findViewById(R.id.btn_login);</span><br><span class="line">        btn_register = (Button)findViewById(R.id.btn_sign_up);</span><br><span class="line">        btn_login.setOnClickListener(this);</span><br><span class="line">        btn_register.setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view)&#123;</span><br><span class="line">        switch(view.getId())&#123;</span><br><span class="line">            case R.id.btn_login:</span><br><span class="line">                if(edit_account.getText().toString().trim().equals(&quot;&quot;)|edit_password.getText().toString().trim().equals(&quot;&quot;))&#123;</span><br><span class="line">                    Toast.makeText(this,&quot;请完善您的信息&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    userInfoIsRight();</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case R.id.btn_sign_up:</span><br><span class="line">                Intent intent = new Intent(LoginActivity.this, RegisterActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    protected void userInfoIsRight()&#123;</span><br><span class="line">        if(isRight(edit_account.getText().toString(),edit_password.getText().toString()))&#123;</span><br><span class="line">            Intent i = new Intent(LoginActivity.this,MainActivity.class);</span><br><span class="line">            startActivity(i);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Toast.makeText(this,&quot;账号或密码错误&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean isRight(String edit_account, String edit_password)&#123;</span><br><span class="line">        dbHelper=new DBHelper(this,DBHelper.DATABASE_NAME,null,DBHelper.DATABASE_VERSION);//对dbHelper进行实体化</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        String sql = &quot;Select * from usertable where username = ? and password = ?&quot;;</span><br><span class="line">        Cursor cursor = db.rawQuery(sql, new String[]&#123;edit_account, edit_password&#125;);</span><br><span class="line">        if(cursor.moveToFirst())&#123;</span><br><span class="line">            cursor.close();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在金韬学长的帮助下，我成功找到了Bug<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br></pre></td></tr></table></figure></p><p>我在之前只是声明了dbHelper,但是并没有给他任何实体，所以它不能调用方法。<br>修改方案就是给它一个实体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dbHelper=new DBHelper(this,DBHelper.DATABASE_NAME,null,DBHelper.DATABASE_VERSION);//对dbHelper进行实体化</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br></pre></td></tr></table></figure></p><p>然后就成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三月二十九日，遇到了一个关于SQLite的Bug。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Debug" scheme="http://yoursite.com/categories/Debug/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Debug/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>Cusor那点事</title>
    <link href="http://yoursite.com/2019/03/30/Cusor%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
    <id>http://yoursite.com/2019/03/30/Cusor那点事/</id>
    <published>2019-03-29T23:20:58.000Z</published>
    <updated>2019-03-30T11:17:46.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cusor那点事"><a href="#Cusor那点事" class="headerlink" title="Cusor那点事"></a>Cusor那点事</h1><a id="more"></a><p>今天写一个登陆界面，到最后判断账号密码的时候，看了一些别人的源码，用到了下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean isRight(String edit_account, String edit_password)&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getWritableDatabase();</span><br><span class="line">        String sql = &quot;Select * from usertable where username = ? and password = ?&quot;;</span><br><span class="line">        Cursor cursor = db.rawQuery(sql, new String[]&#123;edit_account, edit_password&#125;);</span><br><span class="line">        if(cursor.moveToFirst())&#123;</span><br><span class="line">            cursor.close();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><em>emmm~ Cusor 王德发！！！！！这是啥 ?</em><br>上网搜索了一下，cusor是英语‘光标’的意思  </p><hr><h2 id="关于-Cursor"><a href="#关于-Cursor" class="headerlink" title="关于 Cursor"></a>关于 Cursor</h2><p>在你理解和使用 Android Cursor 的时候你必须先知道关于 Cursor 的几件事情：<br>Cursor 是每行的集合。使用 moveToFirst() 定位第一行。你必须知道每一列的名称。你必须知道每一列的数据类型。Cursor 是一个随机的数据源。所有的数据都是通过下标取得。   </p><blockquote><p>关于 Cursor 的重要方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">c.move(int offset); //以当前位置为参考,移动到指定行  </span><br><span class="line">c.moveToFirst();    //移动到第一行  </span><br><span class="line">c.moveToLast();     //移动到最后一行  </span><br><span class="line">c.moveToPosition(int position); //移动到指定行  </span><br><span class="line">c.moveToPrevious(); //移动到前一行  </span><br><span class="line">c.moveToNext();     //移动到下一行  </span><br><span class="line">c.isFirst();        //是否指向第一条  </span><br><span class="line">c.isLast();     //是否指向最后一条  </span><br><span class="line">c.isBeforeFirst();  //是否指向第一条之前  </span><br><span class="line">c.isAfterLast();    //是否指向最后一条之后  </span><br><span class="line">c.isNull(int columnIndex);  //指定列是否为空(列基数为0)  </span><br><span class="line">c.isClosed();       //游标是否已关闭  </span><br><span class="line">c.getCount();       //总数据项数  </span><br><span class="line">c.getPosition();    //返回当前游标所指向的行数  </span><br><span class="line">c.getColumnIndex(String columnName);//返回某列名对应的列索引值，如果不存在返回-1  </span><br><span class="line">c.getString(int columnIndex);   //返回当前行指定列的值  </span><br><span class="line">c·getColumnIndexOrThrow(String columnName)——从零开始返回指定列名称，如果不存在将抛出IllegalArgumentException 异常。</span><br><span class="line">c.close()——关闭游标，释放资源</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>关于cusor的应用，可以看看以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Button query=(Button) findViewById(R.id.query_data);</span><br><span class="line">        query.setOnClickListener(new OnClickListener()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class="line">                //查询Book表中的所有的数据</span><br><span class="line">                //Cursor cursor=db.query(&quot;Book&quot;, null, null, null, null, null, null);</span><br><span class="line">                Cursor cursor=db.rawQuery(&quot;Select * from Book&quot;, null);</span><br><span class="line">                if(cursor.moveToFirst())&#123;</span><br><span class="line">                    do&#123;</span><br><span class="line">                        //遍历Cursor对象，取出数据并打印</span><br><span class="line">                        String name=cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br><span class="line">                        String author=cursor.getString(cursor.getColumnIndex(&quot;author&quot;));</span><br><span class="line">                        int pages=cursor.getInt(cursor.getColumnIndex(&quot;pages&quot;));</span><br><span class="line">                        double price=cursor.getDouble(cursor.getColumnIndex(&quot;price&quot;));</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book name is&quot;+name);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book author is&quot;+author);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book pages is&quot;+pages);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book price is&quot;+price);</span><br><span class="line">                    &#125;while(cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>访问Cusor的下标获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int nameColumnIndex = cur.getColumnIndex(People.NAME);</span><br><span class="line">String name = cur.getString(nameColumnIndex);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>循环 Cursor 取出我们需要的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while(cur.moveToNext()) &#123;</span><br><span class="line">    //光标移动成功</span><br><span class="line">   String email = cursor.getString(cursor.getColumnIndex(RuiXin.EMAIL));</span><br><span class="line">   startManagingCursor(cursor);  //查找后关闭游标 </span><br><span class="line">   //把数据取出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>当cur.moveToNext() 为假时将跳出循环，即 Cursor 数据循环完毕</p><blockquote><p>用 for 循环而不想用While 循环  </p></blockquote><p>·isBeforeFirst()——返回游标是否指向之前第一行的位置<br>·isAfterLast()——返回游标是否指向第最后一行的位置<br>·isClosed()——如果返回 true 即表示该游戏标己关闭<br>有了以上的方法，可以如此取出数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(cur.moveToFirst();!cur.isAfterLast();cur.moveToNext())</span><br><span class="line">&#123;</span><br><span class="line">    int nameColumn = cur.getColumnIndex(People.NAME);</span><br><span class="line">    int phoneColumn = cur.getColumnIndex(People.NUMBER);</span><br><span class="line">    String name = cur.getString(nameColumn);</span><br><span class="line">    String phoneNumber = cur.getString(phoneColumn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="Cusor解析"><a href="#Cusor解析" class="headerlink" title="Cusor解析"></a>Cusor解析</h2><p>一般情况下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDataBase  </span><br><span class="line"> db;   </span><br><span class="line">Cursor  </span><br><span class="line"> cursor = db.query(各种参数);</span><br></pre></td></tr></table></figure></p><p>这时，就出现了网上的解释了，说cursor是每行的集合。<br>现在先解释一下SQLite数据库中是怎么存放数据的，是以表的形式存放的，看这个表Student  </p><p>position | id | name | gender | age | city<br>|–|–|—|–|–|–|<br>0 |1 |张三| 男|19|山东<br>1|2|李四|男|20|上海<br>3|4|王五|男|34|广西<br>4|5|牛大花|女|17|天津<br>5|6|光绪|男|24|北京<br>所以这个每行的集合的意思，是获得的满足条件（就是我们query方法中传入的条件参数）的所有行。<br>比如我要在这个表中找gender为男的，那么获得到的cursor就包含了张三行，李四行，王五行，光绪行。   </p><hr><h3 id="遍历cursor内容的时候，为什么要先moveToFirst-？"><a href="#遍历cursor内容的时候，为什么要先moveToFirst-？" class="headerlink" title="遍历cursor内容的时候，为什么要先moveToFirst()？"></a>遍历cursor内容的时候，为什么要先moveToFirst()？</h3><p>我们不进行moveToFirst()操作，我们获取游标对象后，直接输出它当前的position值<br><img src="https://img-blog.csdn.net/20161201150546871?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt><br>可以看到，输出的值是-1。  </p><p>position | id | name | gender | age | city<br>|–|–|—|–|–|–|<br>-1 |null|null|null|null|null<br>0 |1 |张三| 男|19|山东<br>1|2|李四|男|20|上海<br>3|4|王五|男|34|广西<br>4|5|牛大花|女|17|天津<br>5|6|光绪|男|24|北京<br>也就是说，现在光标在第零行之前。<br>所以我们使用moveToFirst后在输出position就会发现position=0了，使用moveToNext也可以。   </p><hr><h3 id="moveToNext如何得知是否已经遍历完毕呢？"><a href="#moveToNext如何得知是否已经遍历完毕呢？" class="headerlink" title="moveToNext如何得知是否已经遍历完毕呢？"></a>moveToNext如何得知是否已经遍历完毕呢？</h3><p>我们翻看源码，会发现moveToFirst，moveToNext，moveToLast，moveToPrevious等最后都会执行到这个方法<br><img src="https://img-blog.csdn.net/20161201161718716" alt><br>图中说的：这个对象在初始化的时候，指的就是当前页面的那个对象。mPos=-1被写在一个空参构造方法里了。<br>看源码的时候也能发现：<br>moveToFirst调用的是moveToPosition（0）<br>moveToNext调用的是moveToPosition（mPos+1)<br>所以如果是第一次调用的话，这两句话的意思是一样的（开始mPos=-1）。   </p><h3 id="那么现在来看之前的代码"><a href="#那么现在来看之前的代码" class="headerlink" title="那么现在来看之前的代码"></a>那么现在来看之前的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(cursor.moveToFirst())&#123;//用来判断是否遍历并且是否存在这样一组account&amp;password</span><br><span class="line">            cursor.close();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br></pre></td></tr></table></figure><hr><p>本文参考文章<br><a href="https://blog.csdn.net/android_zyf/article/details/53420267" target="_blank" rel="noopener">Android中的Cursor到底是什么？如何理解Cursor的方法都在做什么事情？</a><br><a href="https://www.cnblogs.com/wugu-ren/p/6113773.html" target="_blank" rel="noopener">Android笔记——关于Cursor类的介绍 </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cusor那点事&quot;&gt;&lt;a href=&quot;#Cusor那点事&quot; class=&quot;headerlink&quot; title=&quot;Cusor那点事&quot;&gt;&lt;/a&gt;Cusor那点事&lt;/h1&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="cusor" scheme="http://yoursite.com/tags/cusor/"/>
    
      <category term="SQLite" scheme="http://yoursite.com/tags/SQLite/"/>
    
  </entry>
  
</feed>
